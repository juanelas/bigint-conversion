import*as e from"@juanelas/base64";function t(e,t=!1,n){const r=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==r)throw new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let o=r[2];if(void 0!==n){if(n<o.length/2)throw new RangeError(`expected byte length ${n} < input hex byte length ${Math.ceil(o.length/2)}`);o=o.padStart(2*n,"0")}return t?"0x"+o:o}function n(e,t=!1){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return s(o(e),t)}function r(e){let t=8n;ArrayBuffer.isView(e)?t=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let n=0n;for(const r of e.values()){n=(n<<t)+BigInt(r)}return n}function o(e,t=!1,n){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return e.toString(16)}function f(e){return BigInt(t(e,!0))}function i(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return a(s(e.toString(16)))}function u(e){return f(c(g(e)))}function a(e){return Buffer.from(e).toString()}function g(e,t=!1){return t?(new TextEncoder).encode(e).buffer:Buffer.from((new TextEncoder).encode(e).buffer)}function c(e,n=!1,r){return ArrayBuffer.isView(e)&&(e=new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength))),t(Buffer.from(e).toString("hex"),n,r)}function s(e,n=!1){let r=t(e);r=t(e,!1,Math.ceil(r.length/2));{const e=Buffer.from(r,"hex");return n?e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength):e}}function l(t,r=!1,o=!0){return e.encode(n(t),r,o)}function h(t){return r(e.decode(t))}export{h as base64ToBigint,l as bigintToBase64,n as bigintToBuf,o as bigintToHex,i as bigintToText,r as bufToBigint,c as bufToHex,a as bufToText,f as hexToBigint,s as hexToBuf,t as parseHex,u as textToBigint,g as textToBuf};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RzL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJwYXJzZUhleCIsImEiLCJwcmVmaXgweCIsImJ5dGVMZW5ndGgiLCJoZXhNYXRjaCIsIm1hdGNoIiwiUmFuZ2VFcnJvciIsImhleCIsInVuZGVmaW5lZCIsImxlbmd0aCIsIk1hdGgiLCJjZWlsIiwicGFkU3RhcnQiLCJiaWdpbnRUb0J1ZiIsInJldHVybkFycmF5QnVmZmVyIiwiaGV4VG9CdWYiLCJiaWdpbnRUb0hleCIsImJ1ZlRvQmlnaW50IiwiYnVmIiwiYml0cyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiQmlnSW50IiwiQllURVNfUEVSX0VMRU1FTlQiLCJVaW50OEFycmF5IiwicmV0IiwiaSIsInZhbHVlcyIsInRvU3RyaW5nIiwiaGV4VG9CaWdpbnQiLCJoZXhTdHIiLCJiaWdpbnRUb1RleHQiLCJidWZUb1RleHQiLCJ0ZXh0VG9CaWdpbnQiLCJ0ZXh0IiwiYnVmVG9IZXgiLCJ0ZXh0VG9CdWYiLCJCdWZmZXIiLCJmcm9tIiwic3RyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJidWZmZXIiLCJzbGljZSIsImJ5dGVPZmZzZXQiLCJiIiwiYmlnaW50VG9CYXNlNjQiLCJ1cmxzYWZlIiwicGFkZGluZyIsImI2NCIsImJhc2U2NFRvQmlnaW50IiwiZGVjb2RlIl0sIm1hcHBpbmdzIjoibUNBMkJNLFNBQVVBLEVBQVVDLEVBQVdDLEdBQW9CLEVBQU9DLEdBQzlELE1BQU1DLEVBQVdILEVBQUVJLE1BQU0sd0JBQ3pCLEdBQWdCLE1BQVpELEVBQ0YsTUFBTSxJQUFJRSxXQUFXLHNFQUV2QixJQUFJQyxFQUFNSCxFQUFTLEdBQ25CLFFBQW1CSSxJQUFmTCxFQUEwQixDQUM1QixHQUFJQSxFQUFhSSxFQUFJRSxPQUFTLEVBQzVCLE1BQU0sSUFBSUgsV0FBVyx3QkFBd0JILDZCQUFzQ08sS0FBS0MsS0FBS0osRUFBSUUsT0FBUyxNQUU1R0YsRUFBTUEsRUFBSUssU0FBc0IsRUFBYlQsRUFBZ0IsSUFDcEMsQ0FDRCxPQUFPLEVBQWEsS0FBT0ksRUFBTUEsQ0FDbkMsVUFZZ0JNLEVBQWFaLEVBQVdhLEdBQTZCLEdBQ25FLEdBQUliLEVBQUksRUFBRyxNQUFNSyxXQUFXLHlFQUM1QixPQUFPUyxFQUFTQyxFQUFZZixHQUFJYSxFQUNsQyxDQU9NLFNBQVVHLEVBQWFDLEdBQzNCLElBQUlDLEVBQU8sR0FDUEMsWUFBWUMsT0FBT0gsR0FBTUMsRUFBT0csT0FBK0IsRUFBeEJKLEVBQUlLLG1CQUMxQ0wsRUFBTSxJQUFJTSxXQUFXTixHQUUxQixJQUFJTyxFQUFNLEdBQ1YsSUFBSyxNQUFNQyxLQUFNUixFQUEwQlMsU0FBVSxDQUVuREYsR0FBT0EsR0FBT04sR0FESEcsT0FBT0ksRUFFbkIsQ0FDRCxPQUFPRCxDQUNULENBWU0sU0FBVVQsRUFBYWYsRUFBV0MsR0FBb0IsRUFBT0MsR0FDakUsR0FBSUYsRUFBSSxFQUFHLE1BQU1LLFdBQVcseUVBQzVCLE9BQU9MLEVBQUUyQixTQUFTLEdBQ3BCLENBV00sU0FBVUMsRUFBYUMsR0FDM0IsT0FBT1IsT0FBT3RCLEVBQVM4QixHQUFRLEdBQ2pDLENBV00sU0FBVUMsRUFBYzlCLEdBQzVCLEdBQUlBLEVBQUksRUFBRyxNQUFNSyxXQUFXLHlFQUM1QixPQUFPMEIsRUFBVWpCLEVBQVNkLEVBQUUyQixTQUFTLEtBQ3ZDLENBU00sU0FBVUssRUFBY0MsR0FDNUIsT0FBT0wsRUFBWU0sRUFBU0MsRUFBVUYsSUFDeEMsQ0FTTSxTQUFVRixFQUFXZCxHQUVwQixPQUFPbUIsT0FBT0MsS0FBS3BCLEdBQUtVLFVBQy9CLFVBVWdCUSxFQUFXRyxFQUFhekIsR0FBNkIsR0FDbkUsT0FBb0JBLEdBR2IsSUFBSTBCLGFBQWNDLE9BQU9GLEdBQUtHLE9BRjVCTCxPQUFPQyxNQUFLLElBQUlFLGFBQWNDLE9BQU9GLEdBQUtHLE9BR3JELENBV00sU0FBVVAsRUFBVWpCLEVBQW9DaEIsR0FBb0IsRUFBT0MsR0FjckYsT0FESWlCLFlBQVlDLE9BQU9ILEtBQU1BLEVBQU0sSUFBSU0sV0FBV04sRUFBSXdCLE9BQU9DLE1BQU16QixFQUFJMEIsV0FBWTFCLEVBQUkwQixXQUFhMUIsRUFBSWYsY0FDakdILEVBQVNxQyxPQUFPQyxLQUFLcEIsR0FBS1UsU0FBUyxPQUFRMUIsRUFBVUMsRUFFaEUsVUFZZ0JZLEVBQVVlLEVBQWdCaEIsR0FBNkIsR0FDckUsSUFBSVAsRUFBTVAsRUFBUzhCLEdBQ25CdkIsRUFBTVAsRUFBUzhCLEdBQVEsRUFBT3BCLEtBQUtDLEtBQUtKLEVBQUlFLE9BQVMsSUFLOUMsQ0FDTCxNQUFNb0MsRUFBSVIsT0FBT0MsS0FBSy9CLEVBQUssT0FDM0IsT0FBT08sRUFBb0IrQixFQUFFSCxPQUFPQyxNQUFNRSxFQUFFRCxXQUFZQyxFQUFFRCxXQUFhQyxFQUFFMUMsWUFBYzBDLENBQ3hGLENBQ0gsQ0FZTSxTQUFVQyxFQUFnQjdDLEVBQVc4QyxHQUFtQixFQUFPQyxHQUFtQixHQUN0RixPQUFPQyxFQUFJUixPQUFPNUIsRUFBWVosR0FBSThDLEVBQVNDLEVBQzdDLENBT00sU0FBVUUsRUFBZ0JqRCxHQUM5QixPQUFPZ0IsRUFBWWdDLEVBQUlFLE9BQU9sRCxHQUNoQyJ9
