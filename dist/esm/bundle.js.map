{"version":3,"file":"bundle.js","sources":["../../node_modules/@juanelas/base64/dist/esm/index.browser.js","../../src/ts/index.ts"],"sourcesContent":["function e(e,r=!1,t=!0){let n=\"\";n=(e=>{const r=[];for(let t=0;t<e.length;t+=32768)r.push(String.fromCharCode.apply(null,e.subarray(t,t+32768)));return btoa(r.join(\"\"))})(\"string\"==typeof e?(new TextEncoder).encode(e):new Uint8Array(e));return r&&(n=function(e){return e.replace(/\\+/g,\"-\").replace(/\\//g,\"_\")}(n)),t||(n=n.replace(/=/g,\"\")),n}function r(e,r=!1){{let t=!1;if(/^[0-9a-zA-Z_-]+={0,2}$/.test(e))t=!0;else if(!/^[0-9a-zA-Z+/]*={0,2}$/.test(e))throw new Error(\"Not a valid base64 input\");t&&(e=e.replace(/-/g,\"+\").replace(/_/g,\"/\").replace(/=/g,\"\"));const n=new Uint8Array(atob(e).split(\"\").map((e=>e.charCodeAt(0))));return r?(new TextDecoder).decode(n):n}}export{r as decode,e as encode};\n//# sourceMappingURL=index.browser.js.map\n","/**\n * Conversions from/to bingint to TypedArray/Buffer, hex\n *\n * @remarks\n * This module runs perfectly in node.js and browsers\n *\n * @packageDocumentation\n */\n\nimport * as b64 from '@juanelas/base64'\n\n/**\n * A TypedArray object describes an array-like view of an underlying binary data buffer.\n */\nexport type TypedArray = Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array\n\n/**\n * Parses a hexadecimal string for correctness and returns it with or without '0x' prefix, and/or with the specified byte length\n * @param a - the string with an hexadecimal number to be parsed\n * @param prefix0x - set to true to prefix the output with '0x'\n * @param byteLength - pad the output to have the desired byte length. Notice that the hex length is double the byte length.\n *\n * @returns\n *\n * @throws {@link RangeError} if input string does not hold an hexadecimal number\n * @throws {@link RangeError} if requested byte length is less than the input byte length\n */\nexport function parseHex (a: string, prefix0x: boolean = false, byteLength?: number): string {\n  const hexMatch = a.match(/^(0x)?([\\da-fA-F]+)$/)\n  if (hexMatch == null) {\n    throw new RangeError('input must be a hexadecimal string, e.g. \\'0x124fe3a\\' or \\'0214f1b2\\'')\n  }\n  let hex = hexMatch[2]\n  if (byteLength !== undefined) {\n    if (byteLength < hex.length / 2) {\n      throw new RangeError(`expected byte length ${byteLength} < input hex byte length ${Math.ceil(hex.length / 2)}`)\n    }\n    hex = hex.padStart(byteLength * 2, '0')\n  }\n  return (prefix0x) ? '0x' + hex : hex\n}\n\n/**\n * Converts an arbitrary-size non-negative bigint to an ArrayBuffer or a Buffer (default for Node.js)\n *\n * @param a\n * @param returnArrayBuffer - In Node.js, it forces the output to be an ArrayBuffer instead of a Buffer.\n *\n * @returns an ArrayBuffer or a Buffer with a binary representation of the input bigint\n *\n * @throws {@link RangeError} if a < 0.\n */\nexport function bigintToBuf (a: bigint, returnArrayBuffer: boolean = false): ArrayBuffer | Buffer {\n  if (a < 0) throw RangeError('a should be a non-negative integer. Negative values are not supported')\n  return hexToBuf(bigintToHex(a), returnArrayBuffer)\n}\n\n/**\n * Converts an ArrayBuffer, TypedArray or Buffer (node.js) to a bigint\n * @param buf\n * @returns a bigint\n */\nexport function bufToBigint (buf: ArrayBuffer | TypedArray | Buffer): bigint {\n  let bits = 8n\n  if (ArrayBuffer.isView(buf)) bits = BigInt(buf.BYTES_PER_ELEMENT * 8)\n  else buf = new Uint8Array(buf)\n\n  let ret = 0n\n  for (const i of (buf as TypedArray | Buffer).values()) {\n    const bi = BigInt(i)\n    ret = (ret << bits) + bi\n  }\n  return ret\n}\n\n/**\n * Converts a non-negative bigint to a hexadecimal string\n * @param a - a non negative bigint\n * @param prefix0x - set to true to prefix the output with '0x'\n * @param byteLength - pad the output to have the desired byte length. Notice that the hex length is double the byte length.\n *\n * @returns hexadecimal representation of the input bigint\n *\n * @throws {@link RangeError} if a < 0\n */\nexport function bigintToHex (a: bigint, prefix0x: boolean = false, byteLength?: number): string {\n  if (a < 0) throw RangeError('a should be a non-negative integer. Negative values are not supported')\n  return parseHex(a.toString(16), prefix0x, byteLength)\n}\n\n/**\n * Converts a hexadecimal string to a bigint\n *\n * @param hexStr\n *\n * @returns a bigint\n *\n * @throws {@link RangeError} if input string does not hold an hexadecimal number\n */\nexport function hexToBigint (hexStr: string): bigint {\n  return BigInt(parseHex(hexStr, true))\n}\n\n/**\n * Converts a non-negative bigint representing a binary array of utf-8 encoded text to a string of utf-8 text\n *\n * @param a - A non-negative bigint representing a binary array of utf-8 encoded text.\n *\n * @returns a string text with utf-8 encoding\n *\n * @throws {@link RangeError} if a < 0.\n */\nexport function bigintToText (a: bigint): string {\n  if (a < 0) throw RangeError('a should be a non-negative integer. Negative values are not supported')\n  return bufToText(hexToBuf(a.toString(16)))\n}\n\n/**\n * Converts a utf-8 string to a bigint (from its binary representaion)\n *\n * @param text - A string text with utf-8 encoding\n *\n * @returns a bigint representing a binary array of the input utf-8 encoded text\n */\nexport function textToBigint (text: string): bigint {\n  return hexToBigint(bufToHex(textToBuf(text)))\n}\n\n/**\n * Converts an ArrayBuffer, TypedArray or Buffer (in Node.js) containing utf-8 encoded text to a string of utf-8 text\n *\n * @param buf - A buffer containing utf-8 encoded text\n *\n * @returns a string text with utf-8 encoding\n */\nexport function bufToText (buf: ArrayBuffer | TypedArray | Buffer): string {\n  if (IS_BROWSER) return new TextDecoder().decode(new Uint8Array(buf))\n  else return Buffer.from(buf).toString()\n}\n\n/**\n * Converts a string of utf-8 encoded text to an ArrayBuffer or a Buffer (default in Node.js)\n *\n * @param str - A string of text (with utf-8 encoding)\n * @param returnArrayBuffer - When invoked in Node.js, it can force the output to be an ArrayBuffer instead of a Buffer.\n *\n * @returns an ArrayBuffer or a Buffer containing the utf-8 encoded text\n */\nexport function textToBuf (str: string, returnArrayBuffer: boolean = false): ArrayBuffer | Buffer {\n  if (!IS_BROWSER && !returnArrayBuffer) {\n    return Buffer.from(new TextEncoder().encode(str).buffer)\n  }\n  return new TextEncoder().encode(str).buffer\n}\n\n/**\n * Returns the hexadecimal representation of a buffer.\n *\n * @param buf\n * @param prefix0x - set to true to prefix the output with '0x'\n * @param byteLength - pad the output to have the desired byte length. Notice that the hex length is double the byte length.\n *\n * @returns a string with a hexadecimal representation of the input buffer\n */\nexport function bufToHex (buf: ArrayBuffer | TypedArray | Buffer, prefix0x: boolean = false, byteLength?: number): string {\n  if (IS_BROWSER) {\n    let s = ''\n    const h = '0123456789abcdef'\n    if (ArrayBuffer.isView(buf)) buf = new Uint8Array(buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength))\n    else buf = new Uint8Array(buf);\n\n    (buf as Uint8Array).forEach((v) => {\n      s += h[v >> 4] + h[v & 15]\n    })\n\n    return parseHex(s, prefix0x, byteLength)\n  } else {\n    if (ArrayBuffer.isView(buf)) buf = new Uint8Array(buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength))\n    return parseHex(Buffer.from(buf).toString('hex'), prefix0x, byteLength)\n  }\n}\n\n/**\n * Converts a hexadecimal string to a buffer\n *\n * @param hexStr - A string representing a number with hexadecimal notation\n * @param returnArrayBuffer - In Node.js, it forces the output to be an ArrayBuffer instead of a Buffer.\n *\n * @returns An ArrayBuffer or a Buffer\n *\n * @throws {@link RangeError} if input string does not hold an hexadecimal number\n */\nexport function hexToBuf (hexStr: string, returnArrayBuffer: boolean = false): ArrayBuffer | Buffer {\n  let hex = parseHex(hexStr)\n  hex = parseHex(hexStr, false, Math.ceil(hex.length / 2)) // pad to have a length in bytes\n  if (IS_BROWSER) {\n    return Uint8Array.from(hex.match(/[\\da-fA-F]{2}/g)!.map((h) => { // eslint-disable-line\n      return parseInt(h, 16)\n    })).buffer\n  } else {\n    const b = Buffer.from(hex, 'hex')\n    return returnArrayBuffer ? b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength) : b\n  }\n}\n\n/**\n * Converts an arbitrary-size non-negative bigint to a base64 string\n * @param a - a non negative bigint\n * @param urlsafe - if true Base64 URL encoding is used ('+' and '/' are replaced by '-', '_')\n * @param padding - if false, padding (trailing '=') is removed\n * @returns a base64 representation of the input bigint\n *\n * @throws {RangeError}\n * Thrown if a < 0\n */\nexport function bigintToBase64 (a: bigint, urlsafe: boolean = false, padding: boolean = true): string {\n  return b64.encode(bigintToBuf(a), urlsafe, padding)\n}\n\n/**\n * Converts a base64 string to bigint.\n * @param a base64 string. It accepts standard and URL-safe base64 with and without padding\n * @returns a bigint\n */\nexport function base64ToBigint (a: string): bigint {\n  return bufToBigint(b64.decode(a))\n}\n"],"names":["b64.encode","b64.decode"],"mappings":"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","x_google_ignoreList":[0]}