"use strict";function e(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var t=e(require("@juanelas/base64"));function r(e,t=!1,r){const n=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==n)throw new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let o=n[2];if(void 0!==r){if(r<o.length/2)throw new RangeError(`expected byte length ${r} < input hex byte length ${Math.ceil(o.length/2)}`);o=o.padStart(2*r,"0")}return t?"0x"+o:o}function n(e,t=!1){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return c(i(e),t)}function o(e){let t=8n;ArrayBuffer.isView(e)?t=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let r=0n;for(const n of e.values()){r=(r<<t)+BigInt(n)}return r}function i(e,t=!1,r){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return e.toString(16)}function f(e){return BigInt(r(e,!0))}function u(e){return Buffer.from(e).toString()}function a(e,t=!1){return t?(new TextEncoder).encode(e).buffer:Buffer.from((new TextEncoder).encode(e).buffer)}function s(e,t=!1,n){return ArrayBuffer.isView(e)&&(e=new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength))),r(Buffer.from(e).toString("hex"),t,n)}function c(e,t=!1){let n=r(e);n=r(e,!1,Math.ceil(n.length/2));{const e=Buffer.from(n,"hex");return t?e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength):e}}exports.base64ToBigint=function(e){return o(t.decode(e))},exports.bigintToBase64=function(e,r=!1,o=!0){return t.encode(n(e),r,o)},exports.bigintToBuf=n,exports.bigintToHex=i,exports.bigintToText=function(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return u(c(e.toString(16)))},exports.bufToBigint=o,exports.bufToHex=s,exports.bufToText=u,exports.hexToBigint=f,exports.hexToBuf=c,exports.parseHex=r,exports.textToBigint=function(e){return f(s(a(e)))},exports.textToBuf=a;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubm9kZS5janMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsicGFyc2VIZXgiLCJhIiwicHJlZml4MHgiLCJieXRlTGVuZ3RoIiwiaGV4TWF0Y2giLCJtYXRjaCIsIlJhbmdlRXJyb3IiLCJoZXgiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJNYXRoIiwiY2VpbCIsInBhZFN0YXJ0IiwiYmlnaW50VG9CdWYiLCJyZXR1cm5BcnJheUJ1ZmZlciIsImhleFRvQnVmIiwiYmlnaW50VG9IZXgiLCJidWZUb0JpZ2ludCIsImJ1ZiIsImJpdHMiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkJpZ0ludCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiVWludDhBcnJheSIsInJldCIsImkiLCJ2YWx1ZXMiLCJ0b1N0cmluZyIsImhleFRvQmlnaW50IiwiaGV4U3RyIiwiYnVmVG9UZXh0IiwiQnVmZmVyIiwiZnJvbSIsInRleHRUb0J1ZiIsInN0ciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiYnVmZmVyIiwiYnVmVG9IZXgiLCJzbGljZSIsImJ5dGVPZmZzZXQiLCJiIiwiYjY0IiwiZGVjb2RlIiwidXJsc2FmZSIsInBhZGRpbmciLCJ0ZXh0Il0sIm1hcHBpbmdzIjoicVRBMkJNLFNBQVVBLEVBQVVDLEVBQVdDLEdBQW9CLEVBQU9DLEdBQzlELE1BQU1DLEVBQVdILEVBQUVJLE1BQU0sd0JBQ3pCLEdBQWdCLE1BQVpELEVBQ0YsTUFBTSxJQUFJRSxXQUFXLHNFQUV2QixJQUFJQyxFQUFNSCxFQUFTLEdBQ25CLFFBQW1CSSxJQUFmTCxFQUEwQixDQUM1QixHQUFJQSxFQUFhSSxFQUFJRSxPQUFTLEVBQzVCLE1BQU0sSUFBSUgsV0FBVyx3QkFBd0JILDZCQUFzQ08sS0FBS0MsS0FBS0osRUFBSUUsT0FBUyxNQUU1R0YsRUFBTUEsRUFBSUssU0FBc0IsRUFBYlQsRUFBZ0IsSUFDcEMsQ0FDRCxPQUFPLEVBQWEsS0FBT0ksRUFBTUEsQ0FDbkMsVUFZZ0JNLEVBQWFaLEVBQVdhLEdBQTZCLEdBQ25FLEdBQUliLEVBQUksRUFBRyxNQUFNSyxXQUFXLHlFQUM1QixPQUFPUyxFQUFTQyxFQUFZZixHQUFJYSxFQUNsQyxDQU9NLFNBQVVHLEVBQWFDLEdBQzNCLElBQUlDLEVBQU8sR0FDUEMsWUFBWUMsT0FBT0gsR0FBTUMsRUFBT0csT0FBK0IsRUFBeEJKLEVBQUlLLG1CQUMxQ0wsRUFBTSxJQUFJTSxXQUFXTixHQUUxQixJQUFJTyxFQUFNLEdBQ1YsSUFBSyxNQUFNQyxLQUFNUixFQUE0QlMsU0FBVSxDQUVyREYsR0FBT0EsR0FBT04sR0FESEcsT0FBT0ksRUFFbkIsQ0FDRCxPQUFPRCxDQUNULENBWU0sU0FBVVQsRUFBYWYsRUFBV0MsR0FBb0IsRUFBT0MsR0FDakUsR0FBSUYsRUFBSSxFQUFHLE1BQU1LLFdBQVcseUVBQzVCLE9BQU9MLEVBQUUyQixTQUFTLEdBQ3BCLENBV00sU0FBVUMsRUFBYUMsR0FDM0IsT0FBT1IsT0FBT3RCLEVBQVM4QixHQUFRLEdBQ2pDLENBa0NNLFNBQVVDLEVBQVdiLEdBRXBCLE9BQU9jLE9BQU9DLEtBQUtmLEdBQUtVLFVBQy9CLFVBVWdCTSxFQUFXQyxFQUFhckIsR0FBNkIsR0FDbkUsT0FBb0JBLEdBR2IsSUFBSXNCLGFBQWNDLE9BQU9GLEdBQUtHLE9BRjVCTixPQUFPQyxNQUFLLElBQUlHLGFBQWNDLE9BQU9GLEdBQUtHLE9BR3JELENBV00sU0FBVUMsRUFBVXJCLEVBQXdDaEIsR0FBb0IsRUFBT0MsR0FjekYsT0FESWlCLFlBQVlDLE9BQU9ILEtBQU1BLEVBQU0sSUFBSU0sV0FBV04sRUFBSW9CLE9BQU9FLE1BQU10QixFQUFJdUIsV0FBWXZCLEVBQUl1QixXQUFhdkIsRUFBSWYsY0FDakdILEVBQVNnQyxPQUFPQyxLQUFLZixHQUFLVSxTQUFTLE9BQVExQixFQUFVQyxFQUVoRSxVQVlnQlksRUFBVWUsRUFBZ0JoQixHQUE2QixHQUNyRSxJQUFJUCxFQUFNUCxFQUFTOEIsR0FDbkJ2QixFQUFNUCxFQUFTOEIsR0FBUSxFQUFPcEIsS0FBS0MsS0FBS0osRUFBSUUsT0FBUyxJQUs5QyxDQUNMLE1BQU1pQyxFQUFJVixPQUFPQyxLQUFLMUIsRUFBSyxPQUMzQixPQUFPTyxFQUFvQjRCLEVBQUVKLE9BQU9FLE1BQU1FLEVBQUVELFdBQVlDLEVBQUVELFdBQWFDLEVBQUV2QyxZQUFjdUMsQ0FDeEYsQ0FDSCx3QkFxQk0sU0FBMEJ6QyxHQUM5QixPQUFPZ0IsRUFBWTBCLEVBQUlDLE9BQU8zQyxHQUNoQyx5QkFYTSxTQUEwQkEsRUFBVzRDLEdBQW1CLEVBQU9DLEdBQW1CLEdBQ3RGLE9BQU9ILEVBQUlOLE9BQU94QixFQUFZWixHQUFJNEMsRUFBU0MsRUFDN0MsbUVBekdNLFNBQXdCN0MsR0FDNUIsR0FBSUEsRUFBSSxFQUFHLE1BQU1LLFdBQVcseUVBQzVCLE9BQU95QixFQUFVaEIsRUFBU2QsRUFBRTJCLFNBQVMsS0FDdkMsZ0pBU00sU0FBd0JtQixHQUM1QixPQUFPbEIsRUFBWVUsRUFBU0wsRUFBVWEsSUFDeEMifQ==
