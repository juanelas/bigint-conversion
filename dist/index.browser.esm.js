import*as e from"@juanelas/base64";function n(e,n=!1,t){const r=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==r)throw new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let o=r[2];if(void 0!==t){if(t<o.length/2)throw new RangeError(`expected byte length ${t} < input hex byte length ${Math.ceil(o.length/2)}`);o=o.padStart(2*t,"0")}return n?"0x"+o:o}function t(e,n=!1){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return l(o(e),n)}function r(e){let n=8n;ArrayBuffer.isView(e)?n=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let t=0n;for(const r of e.values()){t=(t<<n)+BigInt(r)}return t}function o(e,n=!1,t){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return e.toString(16)}function a(e){return BigInt(n(e,!0))}function i(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return f(l(e.toString(16)))}function u(e){return a(g(c(e)))}function f(e){return(new TextDecoder).decode(new Uint8Array(e))}function c(e,n=!1){return(new TextEncoder).encode(e).buffer}function g(e,t=!1,r){{let o="";const a="0123456789abcdef";return(e=ArrayBuffer.isView(e)?new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)):new Uint8Array(e)).forEach((e=>{o+=a[e>>4]+a[15&e]})),n(o,t,r)}}function l(e,t=!1){let r=n(e);return r=n(e,!1,Math.ceil(r.length/2)),Uint8Array.from(r.match(/[\da-fA-F]{2}/g).map((e=>parseInt(e,16)))).buffer}function s(n,r=!1,o=!0){return e.encode(t(n),r,o)}function d(n){return r(e.decode(n))}export{d as base64ToBigint,s as bigintToBase64,t as bigintToBuf,o as bigintToHex,i as bigintToText,r as bufToBigint,g as bufToHex,f as bufToText,a as hexToBigint,l as hexToBuf,n as parseHex,u as textToBigint,c as textToBuf};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnJvd3Nlci5lc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy90cy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6bnVsbCwibmFtZXMiOlsicGFyc2VIZXgiLCJhIiwicHJlZml4MHgiLCJieXRlTGVuZ3RoIiwiaGV4TWF0Y2giLCJtYXRjaCIsIlJhbmdlRXJyb3IiLCJoZXgiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJNYXRoIiwiY2VpbCIsInBhZFN0YXJ0IiwiYmlnaW50VG9CdWYiLCJyZXR1cm5BcnJheUJ1ZmZlciIsImhleFRvQnVmIiwiYmlnaW50VG9IZXgiLCJidWZUb0JpZ2ludCIsImJ1ZiIsImJpdHMiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkJpZ0ludCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiVWludDhBcnJheSIsInJldCIsImkiLCJ2YWx1ZXMiLCJ0b1N0cmluZyIsImhleFRvQmlnaW50IiwiaGV4U3RyIiwiYmlnaW50VG9UZXh0IiwiYnVmVG9UZXh0IiwidGV4dFRvQmlnaW50IiwidGV4dCIsImJ1ZlRvSGV4IiwidGV4dFRvQnVmIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJzdHIiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImJ1ZmZlciIsInMiLCJoIiwic2xpY2UiLCJieXRlT2Zmc2V0IiwiZm9yRWFjaCIsInYiLCJmcm9tIiwibWFwIiwicGFyc2VJbnQiLCJiaWdpbnRUb0Jhc2U2NCIsInVybHNhZmUiLCJwYWRkaW5nIiwiYjY0IiwiYmFzZTY0VG9CaWdpbnQiXSwibWFwcGluZ3MiOiJtQ0EyQk0sU0FBVUEsRUFBVUMsRUFBV0MsR0FBb0IsRUFBT0MsR0FDOUQsTUFBTUMsRUFBV0gsRUFBRUksTUFBTSx3QkFDekIsR0FBZ0IsTUFBWkQsRUFDRixNQUFNLElBQUlFLFdBQVcsc0VBRXZCLElBQUlDLEVBQU1ILEVBQVMsR0FDbkIsUUFBbUJJLElBQWZMLEVBQTBCLENBQzVCLEdBQUlBLEVBQWFJLEVBQUlFLE9BQVMsRUFDNUIsTUFB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
