!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).bigintConversion={})}(this,(function(e){"use strict";function t(e,t=!1,n=!0){let r="";r=(e=>{const t=[];for(let n=0;n<e.length;n+=32768)t.push(String.fromCharCode.apply(null,e.subarray(n,n+32768)));return btoa(t.join(""))})("string"==typeof e?(new TextEncoder).encode(e):new Uint8Array(e));return t&&(r=function(e){return e.replace(/\+/g,"-").replace(/\//g,"_")}(r)),n||(r=r.replace(/=/g,"")),r}function n(e,t=!1){{let n=!1;if(/^[0-9a-zA-Z_-]+={0,2}$/.test(e))n=!0;else if(!/^[0-9a-zA-Z+/]*={0,2}$/.test(e))throw new Error("Not a valid base64 input");n&&(e=e.replace(/-/g,"+").replace(/_/g,"/").replace(/=/g,""));const r=new Uint8Array(atob(e).split("").map((e=>e.charCodeAt(0))));return t?(new TextDecoder).decode(r):r}}function r(e,t=!1){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return g(i(e),t)}function o(e){let t=8n;ArrayBuffer.isView(e)?t=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let n=0n;for(const r of e.values()){n=(n<<t)+BigInt(r)}return n}function i(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return e.toString(16)}function a(e){return BigInt("0x"+e)}function f(e){return(new TextDecoder).decode(new Uint8Array(e))}function u(e,t=!1){return(new TextEncoder).encode(e).buffer}function c(e){{let t="";const n="0123456789abcdef";return(e=ArrayBuffer.isView(e)?new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)):new Uint8Array(e)).forEach((e=>{t+=n[e>>4]+n[15&e]})),t}}function g(e,t=!1){if(void 0===e)throw RangeError("hexStr cannot undefined");const n=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==n)throw RangeError("hexStr must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let r=n[2];return r=r.length%2==0?r:"0"+r,Uint8Array.from(r.match(/[\da-fA-F]{2}/g).map((e=>parseInt(e,16)))).buffer}e.base64ToBigint=function(e){return o(n(e))},e.bigintToBase64=function(e,n=!1,o=!0){return t(r(e),n,o)},e.bigintToBuf=r,e.bigintToHex=i,e.bigintToText=function(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return f(g(e.toString(16)))},e.bufToBigint=o,e.bufToHex=c,e.bufToText=f,e.hexToBigint=a,e.hexToBuf=g,e.textToBigint=function(e){return a(c(u(e)))},e.textToBuf=u,Object.defineProperty(e,"__esModule",{value:!0})}));
