function e(e,r=!1,n=!0){let t="";t=(e=>{const r=[];for(let n=0;n<e.length;n+=32768)r.push(String.fromCharCode.apply(null,e.subarray(n,n+32768)));return btoa(r.join(""))})("string"==typeof e?(new TextEncoder).encode(e):new Uint8Array(e));return r&&(t=function(e){return e.replace(/\+/g,"-").replace(/\//g,"_")}(t)),n||(t=t.replace(/=/g,"")),t}function r(e,r=!1){{let n=!1;if(/^[0-9a-zA-Z_-]+={0,2}$/.test(e))n=!0;else if(!/^[0-9a-zA-Z+/]*={0,2}$/.test(e))throw new Error("Not a valid base64 input");n&&(e=e.replace(/-/g,"+").replace(/_/g,"/").replace(/=/g,""));const t=new Uint8Array(atob(e).split("").map((e=>e.charCodeAt(0))));return r?(new TextDecoder).decode(t):t}}function n(e,r=!1){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return l(o(e),r)}function t(e){let r=8n;ArrayBuffer.isView(e)?r=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let n=0n;for(const t of e.values()){n=(n<<r)+BigInt(t)}return n}function o(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return e.toString(16)}function a(e){return BigInt("0x"+e)}function i(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return f(l(e.toString(16)))}function u(e){return a(g(c(e)))}function f(e){return(new TextDecoder).decode(new Uint8Array(e))}function c(e,r=!1){return(new TextEncoder).encode(e).buffer}function g(e){{let r="";const n="0123456789abcdef";return(e=ArrayBuffer.isView(e)?new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)):new Uint8Array(e)).forEach((e=>{r+=n[e>>4]+n[15&e]})),r}}function l(e,r=!1){if(void 0===e)throw RangeError("hexStr cannot undefined");const n=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==n)throw RangeError("hexStr must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let t=n[2];return t=t.length%2==0?t:"0"+t,Uint8Array.from(t.match(/[\da-fA-F]{2}/g).map((e=>parseInt(e,16)))).buffer}function s(r,t=!1,o=!0){return e(n(r),t,o)}function d(e){return t(r(e))}export{d as base64ToBigint,s as bigintToBase64,n as bigintToBuf,o as bigintToHex,i as bigintToText,t as bufToBigint,g as bufToHex,f as bufToText,a as hexToBigint,l as hexToBuf,u as textToBigint,c as textToBuf};
