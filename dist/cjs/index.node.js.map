{"version":3,"file":"index.node.js","sources":["../../src/ts/index.ts"],"sourcesContent":["/**\n * Conversions from/to bingint to TypedArray/Buffer, hex\n *\n * @remarks\n * This module runs perfectly in node.js and browsers\n *\n * @packageDocumentation\n */\n\nimport * as b64 from '@juanelas/base64'\n\n/**\n * A TypedArray object describes an array-like view of an underlying binary data buffer.\n */\nexport type TypedArray = Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array\n\n/**\n * Parses a hexadecimal string for correctness and returns it with or without '0x' prefix, and/or with the specified byte length\n * @param a - the string with an hexadecimal number to be parsed\n * @param prefix0x - set to true to prefix the output with '0x'\n * @param byteLength - pad the output to have the desired byte length. Notice that the hex length is double the byte length.\n *\n * @returns\n *\n * @throws {@link RangeError} if input string does not hold an hexadecimal number\n * @throws {@link RangeError} if requested byte length is less than the input byte length\n */\nexport function parseHex (a: string, prefix0x: boolean = false, byteLength?: number): string {\n  const hexMatch = a.match(/^(0x)?([\\da-fA-F]+)$/)\n  if (hexMatch == null) {\n    throw new RangeError('input must be a hexadecimal string, e.g. \\'0x124fe3a\\' or \\'0214f1b2\\'')\n  }\n  let hex = hexMatch[2]\n  if (byteLength !== undefined) {\n    if (byteLength < hex.length / 2) {\n      throw new RangeError(`expected byte length ${byteLength} < input hex byte length ${Math.ceil(hex.length / 2)}`)\n    }\n    hex = hex.padStart(byteLength * 2, '0')\n  }\n  return (prefix0x) ? '0x' + hex : hex\n}\n\n/**\n * Converts an arbitrary-size non-negative bigint to an ArrayBuffer or a Buffer (default for Node.js)\n *\n * @param a\n * @param returnArrayBuffer - In Node.js, it forces the output to be an ArrayBuffer instead of a Buffer.\n *\n * @returns an ArrayBuffer or a Buffer with a binary representation of the input bigint\n *\n * @throws {@link RangeError} if a < 0.\n */\nexport function bigintToBuf (a: bigint, returnArrayBuffer: boolean = false): ArrayBuffer | Buffer {\n  if (a < 0) throw RangeError('a should be a non-negative integer. Negative values are not supported')\n  return hexToBuf(bigintToHex(a), returnArrayBuffer)\n}\n\n/**\n * Converts an ArrayBuffer, TypedArray or Buffer (node.js) to a bigint\n * @param buf\n * @returns a bigint\n */\nexport function bufToBigint (buf: ArrayBuffer | TypedArray | Buffer): bigint {\n  let bits = 8n\n  if (ArrayBuffer.isView(buf)) bits = BigInt(buf.BYTES_PER_ELEMENT * 8)\n  else buf = new Uint8Array(buf)\n\n  let ret = 0n\n  for (const i of (buf as TypedArray | Buffer).values()) {\n    const bi = BigInt(i)\n    ret = (ret << bits) + bi\n  }\n  return ret\n}\n\n/**\n * Converts a non-negative bigint to a hexadecimal string\n * @param a - a non negative bigint\n * @param prefix0x - set to true to prefix the output with '0x'\n * @param byteLength - pad the output to have the desired byte length. Notice that the hex length is double the byte length.\n *\n * @returns hexadecimal representation of the input bigint\n *\n * @throws {@link RangeError} if a < 0\n */\nexport function bigintToHex (a: bigint, prefix0x: boolean = false, byteLength?: number): string {\n  if (a < 0) throw RangeError('a should be a non-negative integer. Negative values are not supported')\n  return parseHex(a.toString(16), prefix0x, byteLength)\n}\n\n/**\n * Converts a hexadecimal string to a bigint\n *\n * @param hexStr\n *\n * @returns a bigint\n *\n * @throws {@link RangeError} if input string does not hold an hexadecimal number\n */\nexport function hexToBigint (hexStr: string): bigint {\n  return BigInt(parseHex(hexStr, true))\n}\n\n/**\n * Converts a non-negative bigint representing a binary array of utf-8 encoded text to a string of utf-8 text\n *\n * @param a - A non-negative bigint representing a binary array of utf-8 encoded text.\n *\n * @returns a string text with utf-8 encoding\n *\n * @throws {@link RangeError} if a < 0.\n */\nexport function bigintToText (a: bigint): string {\n  if (a < 0) throw RangeError('a should be a non-negative integer. Negative values are not supported')\n  return bufToText(hexToBuf(a.toString(16)))\n}\n\n/**\n * Converts a utf-8 string to a bigint (from its binary representaion)\n *\n * @param text - A string text with utf-8 encoding\n *\n * @returns a bigint representing a binary array of the input utf-8 encoded text\n */\nexport function textToBigint (text: string): bigint {\n  return hexToBigint(bufToHex(textToBuf(text)))\n}\n\n/**\n * Converts an ArrayBuffer, TypedArray or Buffer (in Node.js) containing utf-8 encoded text to a string of utf-8 text\n *\n * @param buf - A buffer containing utf-8 encoded text\n *\n * @returns a string text with utf-8 encoding\n */\nexport function bufToText (buf: ArrayBuffer | TypedArray | Buffer): string {\n  if (IS_BROWSER) return new TextDecoder().decode(new Uint8Array(buf))\n  else return Buffer.from(buf).toString()\n}\n\n/**\n * Converts a string of utf-8 encoded text to an ArrayBuffer or a Buffer (default in Node.js)\n *\n * @param str - A string of text (with utf-8 encoding)\n * @param returnArrayBuffer - When invoked in Node.js, it can force the output to be an ArrayBuffer instead of a Buffer.\n *\n * @returns an ArrayBuffer or a Buffer containing the utf-8 encoded text\n */\nexport function textToBuf (str: string, returnArrayBuffer: boolean = false): ArrayBuffer | Buffer {\n  if (!IS_BROWSER && !returnArrayBuffer) {\n    return Buffer.from(new TextEncoder().encode(str).buffer)\n  }\n  return new TextEncoder().encode(str).buffer\n}\n\n/**\n * Returns the hexadecimal representation of a buffer.\n *\n * @param buf\n * @param prefix0x - set to true to prefix the output with '0x'\n * @param byteLength - pad the output to have the desired byte length. Notice that the hex length is double the byte length.\n *\n * @returns a string with a hexadecimal representation of the input buffer\n */\nexport function bufToHex (buf: ArrayBuffer | TypedArray | Buffer, prefix0x: boolean = false, byteLength?: number): string {\n  if (IS_BROWSER) {\n    let s = ''\n    const h = '0123456789abcdef'\n    if (ArrayBuffer.isView(buf)) buf = new Uint8Array(buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength))\n    else buf = new Uint8Array(buf);\n\n    (buf as Uint8Array).forEach((v) => {\n      s += h[v >> 4] + h[v & 15]\n    })\n\n    return parseHex(s, prefix0x, byteLength)\n  } else {\n    if (ArrayBuffer.isView(buf)) buf = new Uint8Array(buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength))\n    return parseHex(Buffer.from(buf).toString('hex'), prefix0x, byteLength)\n  }\n}\n\n/**\n * Converts a hexadecimal string to a buffer\n *\n * @param hexStr - A string representing a number with hexadecimal notation\n * @param returnArrayBuffer - In Node.js, it forces the output to be an ArrayBuffer instead of a Buffer.\n *\n * @returns An ArrayBuffer or a Buffer\n *\n * @throws {@link RangeError} if input string does not hold an hexadecimal number\n */\nexport function hexToBuf (hexStr: string, returnArrayBuffer: boolean = false): ArrayBuffer | Buffer {\n  let hex = parseHex(hexStr)\n  hex = parseHex(hexStr, false, Math.ceil(hex.length / 2)) // pad to have a length in bytes\n  if (IS_BROWSER) {\n    return Uint8Array.from(hex.match(/[\\da-fA-F]{2}/g)!.map((h) => { // eslint-disable-line\n      return parseInt(h, 16)\n    })).buffer\n  } else {\n    const b = Buffer.from(hex, 'hex')\n    return returnArrayBuffer ? b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength) : b\n  }\n}\n\n/**\n * Converts an arbitrary-size non-negative bigint to a base64 string\n * @param a - a non negative bigint\n * @param urlsafe - if true Base64 URL encoding is used ('+' and '/' are replaced by '-', '_')\n * @param padding - if false, padding (trailing '=') is removed\n * @returns a base64 representation of the input bigint\n *\n * @throws {RangeError}\n * Thrown if a < 0\n */\nexport function bigintToBase64 (a: bigint, urlsafe: boolean = false, padding: boolean = true): string {\n  return b64.encode(bigintToBuf(a), urlsafe, padding)\n}\n\n/**\n * Converts a base64 string to bigint.\n * @param a base64 string. It accepts standard and URL-safe base64 with and without padding\n * @returns a bigint\n */\nexport function base64ToBigint (a: string): bigint {\n  return bufToBigint(b64.decode(a))\n}\n"],"names":["parseHex","a","prefix0x","byteLength","hexMatch","match","RangeError","hex","undefined","length","Math","ceil","padStart","bigintToBuf","returnArrayBuffer","hexToBuf","bigintToHex","bufToBigint","buf","bits","ArrayBuffer","isView","BigInt","BYTES_PER_ELEMENT","Uint8Array","ret","i","values","toString","hexToBigint","hexStr","bufToText","Buffer","from","textToBuf","str","TextEncoder","encode","buffer","bufToHex","slice","byteOffset","b","b64","decode","urlsafe","padding","text"],"mappings":"iVA2BM,SAAUA,EAAUC,EAAWC,GAAoB,EAAOC,GAC9D,MAAMC,EAAWH,EAAEI,MAAM,wBACzB,GAAgB,MAAZD,EACF,MAAM,IAAIE,WAAW,sEAEvB,IAAIC,EAAMH,EAAS,GACnB,QAAmBI,IAAfL,EAA0B,CAC5B,GAAIA,EAAaI,EAAIE,OAAS,EAC5B,MAAM,IAAIH,WAAW,wBAAwBH,6BAAsCO,KAAKC,KAAKJ,EAAIE,OAAS,MAE5GF,EAAMA,EAAIK,SAAsB,EAAbT,EAAgB,IACpC,CACD,OAAO,EAAa,KAAOI,EAAMA,CACnC,UAYgBM,EAAaZ,EAAWa,GAA6B,GACnE,GAAIb,EAAI,EAAG,MAAMK,WAAW,yEAC5B,OAAOS,EAASC,EAAYf,GAAIa,EAClC,CAOM,SAAUG,EAAaC,GAC3B,IAAIC,EAAO,GACPC,YAAYC,OAAOH,GAAMC,EAAOG,OAA+B,EAAxBJ,EAAIK,mBAC1CL,EAAM,IAAIM,WAAWN,GAE1B,IAAIO,EAAM,GACV,IAAK,MAAMC,KAAMR,EAA4BS,SAAU,CAErDF,GAAOA,GAAON,GADHG,OAAOI,EAEnB,CACD,OAAOD,CACT,CAYM,SAAUT,EAAaf,EAAWC,GAAoB,EAAOC,GACjE,GAAIF,EAAI,EAAG,MAAMK,WAAW,yEAC5B,OAAON,EAASC,EAAE2B,SAAS,IAAK1B,EAAUC,EAC5C,CAWM,SAAU0B,EAAaC,GAC3B,OAAOR,OAAOtB,EAAS8B,GAAQ,GACjC,CAkCM,SAAUC,EAAWb,GAEpB,OAAOc,OAAOC,KAAKf,GAAKU,UAC/B,UAUgBM,EAAWC,EAAarB,GAA6B,GACnE,OAAoBA,GAGb,IAAIsB,aAAcC,OAAOF,GAAKG,OAF5BN,OAAOC,MAAK,IAAIG,aAAcC,OAAOF,GAAKG,OAGrD,CAWM,SAAUC,EAAUrB,EAAwChB,GAAoB,EAAOC,GAczF,OADIiB,YAAYC,OAAOH,KAAMA,EAAM,IAAIM,WAAWN,EAAIoB,OAAOE,MAAMtB,EAAIuB,WAAYvB,EAAIuB,WAAavB,EAAIf,cACjGH,EAASgC,OAAOC,KAAKf,GAAKU,SAAS,OAAQ1B,EAAUC,EAEhE,UAYgBY,EAAUe,EAAgBhB,GAA6B,GACrE,IAAIP,EAAMP,EAAS8B,GACnBvB,EAAMP,EAAS8B,GAAQ,EAAOpB,KAAKC,KAAKJ,EAAIE,OAAS,IAK9C,CACL,MAAMiC,EAAIV,OAAOC,KAAK1B,EAAK,OAC3B,OAAOO,EAAoB4B,EAAEJ,OAAOE,MAAME,EAAED,WAAYC,EAAED,WAAaC,EAAEvC,YAAcuC,CACxF,CACH,wBAqBM,SAA0BzC,GAC9B,OAAOgB,EAAY0B,EAAIC,OAAO3C,GAChC,yBAXM,SAA0BA,EAAW4C,GAAmB,EAAOC,GAAmB,GACtF,OAAOH,EAAIN,OAAOxB,EAAYZ,GAAI4C,EAASC,EAC7C,mEAzGM,SAAwB7C,GAC5B,GAAIA,EAAI,EAAG,MAAMK,WAAW,yEAC5B,OAAOyB,EAAUhB,EAASd,EAAE2B,SAAS,KACvC,gJASM,SAAwBmB,GAC5B,OAAOlB,EAAYU,EAASL,EAAUa,IACxC"}