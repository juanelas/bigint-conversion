"use strict";function e(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var t=e(require("@juanelas/base64"));function r(e,t=!1,r){const n=e.match(/^(0x)?([\da-fA-F]+)$/);if(null==n)throw new RangeError("input must be a hexadecimal string, e.g. '0x124fe3a' or '0214f1b2'");let o=n[2];if(void 0!==r){if(r<o.length/2)throw new RangeError(`expected byte length ${r} < input hex byte length ${Math.ceil(o.length/2)}`);o=o.padStart(2*r,"0")}return t?"0x"+o:o}function n(e,t=!1){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return c(i(e),t)}function o(e){let t=8n;ArrayBuffer.isView(e)?t=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let r=0n;for(const n of e.values()){r=(r<<t)+BigInt(n)}return r}function i(e,t=!1,n){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return r(e.toString(16),t,n)}function f(e){return BigInt(r(e,!0))}function u(e){return Buffer.from(e).toString()}function a(e,t=!1){return t?(new TextEncoder).encode(e).buffer:Buffer.from((new TextEncoder).encode(e).buffer)}function s(e,t=!1,n){return ArrayBuffer.isView(e)&&(e=new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength))),r(Buffer.from(e).toString("hex"),t,n)}function c(e,t=!1){let n=r(e);n=r(e,!1,Math.ceil(n.length/2));{const e=Buffer.from(n,"hex");return t?e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength):e}}exports.base64ToBigint=function(e){return o(t.decode(e))},exports.bigintToBase64=function(e,r=!1,o=!0){return t.encode(n(e),r,o)},exports.bigintToBuf=n,exports.bigintToHex=i,exports.bigintToText=function(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return u(c(e.toString(16)))},exports.bufToBigint=o,exports.bufToHex=s,exports.bufToText=u,exports.hexToBigint=f,exports.hexToBuf=c,exports.parseHex=r,exports.textToBigint=function(e){return f(s(a(e)))},exports.textToBuf=a;
//# sourceMappingURL=index.node.js.map
