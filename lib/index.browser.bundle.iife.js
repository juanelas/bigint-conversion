var bigintConversion=function(e){"use strict";function t(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return e.toString(16)}function n(e){return BigInt("0x"+e)}function r(e){return(new TextDecoder).decode(new Uint8Array(e))}function i(e,t=!1){return(new TextEncoder).encode(e).buffer}function o(e){{let t="";const n="0123456789abcdef";return(e=ArrayBuffer.isView(e)?new Uint8Array(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)):new Uint8Array(e)).forEach((e=>{t+=n[e>>4]+n[15&e]})),t}}function u(e,t=!1){return e=e.length%2?"0"+e:e,Uint8Array.from(e.trimLeft("0x").match(/[\da-f]{2}/gi).map((e=>parseInt(e,16)))).buffer}return e.bigintToBuf=function(e,n=!1){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return u(t(e),n)},e.bigintToHex=t,e.bigintToText=function(e){if(e<0)throw RangeError("a should be a non-negative integer. Negative values are not supported");return r(u(e.toString(16)))},e.bufToBigint=function(e){let t=8n;ArrayBuffer.isView(e)?t=BigInt(8*e.BYTES_PER_ELEMENT):e=new Uint8Array(e);let n=0n;for(const r of e.values()){n=(n<<t)+BigInt(r)}return n},e.bufToHex=o,e.bufToText=r,e.hexToBigint=n,e.hexToBuf=u,e.textToBigint=function(e){return n(o(i(e)))},e.textToBuf=i,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
